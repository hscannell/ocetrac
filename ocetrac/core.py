# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['label_blobs', 'track_blobs']

# Cell
def label_blobs(da, include_poles=False, radius=8, area_quantile=0.75):
    '''2D image labeling

    Parameters
    ----------
    da : xarray.DataArray
        The data to label

    Returns
    -------
    labels : xarray.DataArray
        Integer labels of connected regions.
    '''

    # Converts data to binary, defines structuring element, and performs morphological closing then opening
    binary_images = _morphological_operations(da, include_poles=include_poles, radius=radius)

    # label features from binary images
    ID = _id(binary_images)

    # wrap labels that cross prime meridian
    bitmap_binary_2E, bitmap_bool_2E = _wrap_labels(ID)

    ### ! Reapply land maks HERE

    # relabel 2D features from binary images that are wrapped around meridian
    ID_wrap = _id(bitmap_binary_2E)

    # calculatre area with regionprops
    area, min_area, labelprops = _id_area(ID_wrap, area_quantile)

    keep_labels = labelprops.where(area>=min_area, drop=True)

    ID_area_bool = xr.DataArray(np.isin(ID_wrap, keep_labels).reshape(ID_wrap.shape),
                               dims=ID_wrap.dims, coords=ID_wrap.coords)

    # Calculate Percent of total MHW area retained
    tot_area = int(np.sum(area.values))
    small_area = area.where(area<=min_area, drop=True)
    small_area = int(np.sum(small_area.values))
    percent_area_kept = 1-(small_area/tot_area)

    labels = _id(ID_area_bool)
    labels = labels.rename('labels')
    labels.attrs['min_area'] = min_area
    labels.attrs['percent_area_kept'] = percent_area_kept
    print('Number of labeled features \t', int(labels.max().values))

    return labels

# Cell
def track_blobs(labels):
    '''Track labeled features

    Parameters
    ----------
    da : xarray.DataArray
        The data in which to track features

    Returns
    -------
    tracked : xarray.DataArray
        Integer labels of tracked regions.
    '''

    bitmap_binary = labels.where(labels>0, drop=False, other=0)
    bitmap_binary = bitmap_binary.where(bitmap_binary==0, drop=False, other=1)

    ####### Label with Skimage
    # relabel
    label_sk3, final_features = label(bitmap_binary, connectivity=labels.shape[0], return_num=True)
    # scikit-image dask image

    # Convert labels to DataArray
    mhw_id_3 = xr.DataArray(label_sk3, dims=['time','lat','lon'],
                                 coords={'time': labels.time, 'lat': labels.lat,'lon': labels.lon})
    mhw_id_3 = mhw_id_3.where(mhw_id_3 > 0, drop=False, other=np.nan)

    print('final features \t', final_features)

    tracks = mhw_id_3.rename('labels')
    tracks.attrs['total MHWs'] = final_features
    tracks.attrs['minimum size (km2)'] = labels.attrs['min_area']
    tracks.attrs['minimum size percentile'] = min_size_quartile
    tracks.attrs['fraction of total MHW area kept'] = labels.attrs['percent_area_kept']
    tracks.attrs['morphological radius'] = radius
    tracks.attrs['resolution'] = res

    return tracks
