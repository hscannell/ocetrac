# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['track']

# Cell
def track(da, radius=8, area_quantile=0.75):
    '''Image labeling and tracking.

    Parameters
    ----------
    da : xarray.DataArray
        The data to label.

    radius : int
        size of the structuring element used in morphological opening and closing.

    area_quantile : float
        quantile used to define the threshold of the smallest area object retained in tracking.

    Returns
    -------
    labels : xarray.DataArray
        Integer labels of the connected regions.
    '''

    # Converts data to binary, defines structuring element, and performs morphological closing then opening
    binary_images = _morphological_operations(da, radius=radius)

    # label features from binary images
    ID = _id(binary_images)

    # wrap labels that cross prime meridian
    bitmap_binary_2E, bitmap_bool_2E = _wrap_labels(ID)

    ### ! Reapply land maks HERE

    # relabel 2D features from binary images that are wrapped around meridian
    ID_wrap = _id(bitmap_binary_2E)

    # calculatre area with regionprops
    area, min_area, labelprops = _id_area(ID_wrap, area_quantile)

    keep_labels = labelprops.where(area>=min_area, drop=True)

    ID_area_bool = xr.DataArray(np.isin(ID_wrap, keep_labels).reshape(ID_wrap.shape),
                               dims=ID_wrap.dims, coords=ID_wrap.coords)

    # Calculate Percent of total MHW area retained
    tot_area = int(np.sum(area.values))
    small_area = area.where(area<=min_area, drop=True)
    small_area = int(np.sum(small_area.values))
    percent_area_kept = 1-(small_area/tot_area)

    features = _id(ID_area_bool)
    features = features.rename('labels')
    features.attrs['min_area'] = min_area
    features.attrs['percent_area_kept'] = percent_area_kept
    print('inital features identified \t', int(features.max().values))

    ## Track labeled features
    bitmap_binary = features.where(features>0, drop=False, other=0)
    bitmap_binary = bitmap_binary.where(bitmap_binary==0, drop=False, other=1)

    ####### Label with Skimage
    # relabel
    label_sk3, final_features = label(bitmap_binary, connectivity=3, return_num=True)
    # explore scikit-image dask image

    label_sk3 = xr.DataArray(label_sk3, dims=['time','lat','lon'],
                          coords={'time': bitmap_binary.time, 'lat': bitmap_binary.lat,'lon': bitmap_binary.lon})
    binary_labels = label_sk3.where(label_sk3>0, drop=False, other=0)
    split_lon = int(binary_labels.shape[2]/2)
    origonal_map = binary_labels[:,:,split_lon:].values + binary_labels[:,:,:split_lon].values
    # Convert labels to DataArray

    labels = xr.DataArray(origonal_map, dims=['time','lat','lon'],
                          coords={'time': da.time, 'lat': da.lat,'lon': da.lon})
    labels = labels.where(labels > 0, drop=False, other=np.nan)


    print('final features tracked \t', final_features)

    return labels